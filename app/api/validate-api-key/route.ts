import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// Utiliser la cl√© de service pour contourner RLS
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes pour la validation API');
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

export async function POST(request: NextRequest) {
  try {
    const { apiKey } = await request.json();

    // V√©rifier le format de base de la cl√© API
    if (!apiKey || typeof apiKey !== 'string') {
      return NextResponse.json({
        isValid: false,
        error: 'Format de cl√© API invalide'
      }, { status: 400 });
    }

    // V√©rifier que la cl√© commence par le pr√©fixe attendu
    if (!apiKey.startsWith('dominium-')) {
      return NextResponse.json({
        isValid: false,
        error: 'La cl√© API doit commencer par "dominium-"'
      }, { status: 400 });
    }

    // V√©rifier la longueur minimale
    if (apiKey.length < 20) {
      return NextResponse.json({
        isValid: false,
        error: 'La cl√© API est trop courte'
      }, { status: 400 });
    }

    console.log('üîç Validation de la cl√© API c√¥t√© serveur:', apiKey.substring(0, 10) + '...');

    // V√©rifier l'existence de la cl√© dans la base de donn√©es avec la cl√© de service
    const { data, error } = await supabase
      .from('api_keys')
      .select('id, user_id, name, type, usage_count')
      .eq('key_value', apiKey)
      .single();

    if (error) {
      console.log('‚ùå Erreur Supabase c√¥t√© serveur:', {
        message: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint
      });
      
      // Si c'est une erreur "aucune ligne trouv√©e", c'est normal
      if (error.code === 'PGRST116') {
        console.log('‚ÑπÔ∏è Cl√© API introuvable dans la base de donn√©es');
        return NextResponse.json({
          isValid: false,
          error: 'Cl√© API introuvable'
        }, { status: 404 });
      }
      
      return NextResponse.json({
        isValid: false,
        error: 'Erreur lors de la validation'
      }, { status: 500 });
    }

    // Si on trouve une cl√©, elle est valide
    if (data) {
      console.log('‚úÖ Cl√© API valide trouv√©e c√¥t√© serveur:', data.id);
      return NextResponse.json({
        isValid: true,
        keyInfo: {
          id: data.id,
          name: data.name,
          type: data.type,
          usage_count: data.usage_count,
          user_id: data.user_id
        }
      });
    }

    console.log('‚ùå Aucune cl√© API trouv√©e');
    return NextResponse.json({
      isValid: false,
      error: 'Cl√© API introuvable'
    }, { status: 404 });

  } catch (error) {
    console.error('‚ùå Erreur lors de la validation de la cl√© API c√¥t√© serveur:', {
      message: error instanceof Error ? error.message : 'Erreur inconnue',
      stack: error instanceof Error ? error.stack : undefined
    });
    
    return NextResponse.json({
      isValid: false,
      error: 'Erreur inattendue lors de la validation'
    }, { status: 500 });
  }
}

